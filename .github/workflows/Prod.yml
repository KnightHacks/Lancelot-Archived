# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# And deploy the bot to the prod instance
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js Prod

on:
  push:
    branches: [ main ]

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'
          registry-url: 'https://registry.npmjs.org'
      - uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Dependencies
        run: npm ci
        env:
          NPM_CONFIG_PRODUCTION: false
      - name: Run Build
        run: npm run build
          
  Test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'
          registry-url: 'https://registry.npmjs.org'
      - uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Dependencies
        run: npm ci
        env:
          NPM_CONFIG_PRODUCTION: false
      - name: Run Build
        run: npm run build
      - name: Run Tests
        run: npm test

  Lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'
          registry-url: 'https://registry.npmjs.org'
      - uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Dependencies
        run: npm ci
      - name: Run Linter
        run: npm run lint
   # Dockerize the bot to be sent to azure containter registery
  Dockerize:
    runs-on: ubuntu-latest
    steps:
        - name: Check out code into the node module
          uses: actions/checkout@v2
        # step 1: Docker login        
        - name: 'Docker login'
          uses: azure/docker-login@v1
          with:
            login-server: ${{ secrets.REGISTRY_LOGIN_SERVER}}
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}
            
        # step 2: Build Docker Image  
        - name: Build Docker
          run: |
            sudo ls
            docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER}}/lancelot:${{ github.sha }}
        
        # step 3: Push Docker to Azure Registry  
        - name: Push Docker
          run: docker push ${{ secrets.REGISTRY_LOGIN_SERVER}}/lancelot:${{ github.sha }}
          
#   Deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.SERVER_IP }}
#           username: ${{ secrets.SERVER_USER }}
#           key: ${{ secrets.KEY }}
#           script: |
#             sudo pkill start:prod 
#             cd Lancelot
#             sudo git pull
#             sudo npm run start:prod &
#             exit
