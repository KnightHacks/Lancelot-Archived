# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# And deploy the bot to the prod instance
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js Prod

on:
  push:
    branches: [main]

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'
      - uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Dependencies
        run: npm ci
        env:
          NPM_CONFIG_PRODUCTION: false
      - name: Run Build
        run: npm run build
  Sentry:
    runs-on: ubuntu-latest
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: 'knight-hacks'
      SENTRY_PROJECT: 'discord-bot'
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'
      - uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Dependencies
        run: npm ci
        env:
          NPM_CONFIG_PRODUCTION: false
      - name: Run Build
        run: tsc -p tsconfig.production.json
      - name: Create a new Sentry release.
        run: ./node_modules/.bin/sentry-cli releases new "$GITHUB_SHA"
      - name: Upload artifacts to release.
        run: ./node_modules/.bin/sentry-cli releases files "$GITHUB_SHA" upload-sourcemaps ./dist
      - name: Finalize release
        run: ./node_modules/.bin/sentry-cli releases finalize "$GITHUB_SHA"

  Test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'
      - uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Dependencies
        run: npm ci
        env:
          NPM_CONFIG_PRODUCTION: false
      - name: Run Build
        run: npm run build
      - name: Run Tests
        run: npm test

  Lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'
      - uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Dependencies
        run: npm ci
      - name: Run Linter
        run: npm run lint
    # Dockerize the bot to be sent to azure containter registery
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the node module
        uses: actions/checkout@v2
      # step 1: Docker login
      - name: 'Docker login'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER}}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # step 2: Build Docker Image
      - name: Build Docker
        run: |
          docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER}}/lancelot

      # step 3: Push Docker to Azure Registry
      - name: Push Docker
        run: docker push ${{ secrets.REGISTRY_LOGIN_SERVER}}/lancelot

      - uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.KEY }}
          script: |
            sudo rm -r .env
            echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN}}" > .env 
            echo "GUILD_ID=${{ secrets.GUILD_ID }}" >> .env 
            echo "WEATHER_API_KEY=${{ secrets.WEATHER_API}}" >> .env 
            echo "SENTRY_DSN=${{ secrets.SENTRY_DSN}}" >> .env
            echo "GITHUB_SHA=${{ github.sha }}" >> .env
            sudo docker stop lancelot
            sudo docker rm lancelot
            sudo docker login lancelot.azurecr.io -u ${{ secrets.AZURE_CONTAINER_USER}} -p ${{ secrets.AZURE_CONTAINER_PASSWORD}}
            sudo docker pull ${{ secrets.REGISTRY_LOGIN_SERVER}}/lancelot:${{ github.sha }}
            sudo docker run --env-file .env -d --name lancelot  ${{ secrets.REGISTRY_LOGIN_SERVER}}/lancelot:${{ github.sha }}
            ./discord.sh --webhook-url=${{ secrets.LANCELOT_WEBHOOK}} --text "Lancelot is deployed, give a minute to boot!"
