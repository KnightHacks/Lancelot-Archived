# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# And deploy the bot to the prod instance
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CD
concurrency: deploy_workflow

on:
  push:
    branches:
      - main

env:
  NODE_VERSION: 16.x
  CLUSTER_NAME: 2021-hackathon-k8s
  REGISTRY_NAME: knighthacks2021
  CLUSTER_RESOURCE_GROUP: 2021-hackathon-k8s-cluster
  SECRET: lancelotpullsecret

jobs:
  Build:
    name: Build the App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '${{ env.NODE_VERSION }}'
          registry-url: 'https://registry.npmjs.org'

      - uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: npm i npm@latest -g && npm ci
        env:
          NPM_CONFIG_PRODUCTION: false

      - name: Run Build
        run: npm run build

  Test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '${{ env.NODE_VERSION }}'
          registry-url: 'https://registry.npmjs.org'

      - uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: npm i npm@latest -g && npm ci
        env:
          NPM_CONFIG_PRODUCTION: false

      - name: Run Build
        run: npm run build

      - name: Run Tests
        run: npm test

  Lint:
    name: Run Linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '${{ env.NODE_VERSION }}'
          registry-url: 'https://registry.npmjs.org'

      - uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: npm i npm@latest -g && npm ci

      - name: Run Linter
        run: npm run lint

  Staging:
    name: Deploy to Staging
    needs:
      - Build
      - Test
      - Lint
    runs-on: ubuntu-latest
    environment: Staging
    env:
      NAMESPACE: staging
    steps:
      - uses: actions/checkout@v2

      - name: Connect to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.K8S_ACR_REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.K8S_ACR_REGISTRY_USERNAME }}
          password: ${{ secrets.K8S_ACR_REGISTRY_PASSWORD }}

      - name: Build and Push to ACR
        run: |
          docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/lancelot:${{ github.sha }}
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/lancelot:${{ github.sha }}

      - name: Set AKS Context
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

      - name: Create k8s namespace if it doesn't exist
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=none -o json | kubectl apply -f -

      - name: Create image pull secret for ACR
        uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
          container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          secret-name: ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}

      - name: Create lancelot secret
        uses: azure/k8s-create-secret@v1
        with:
          secret-name: kh-lancelot-secret
          namespace: ${{ env.NAMESPACE }}
          secret-type: generic
          arguments: >
            --from-literal=DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
            --from-literal=GUILD_ID=${{ secrets.GUILD_ID }}
            --from-literal=WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }}
            --from-literal=SENTRY_DSN=${{ secrets.SENTRY_DSN }}
            --from-literal=SENTRY_ENV=${{ env.NAMESPACE }}
            --from-literal=GITHUB_SHA=${{ github.sha }}

      - name: Deploy to AKS
        uses: azure/k8s-deploy@v1
        with:
          manifests: |
            manifests/bot.yml
          images: '${{ env.REGISTRY_NAME }}.azurecr.io/lancelot:${{ github.sha }}'
          imagepullsecrets: |
            ${{ env.SECRET }}
            kh-lancelot-secret
          namespace: ${{ env.NAMESPACE }}

  #      - name: Send Webhook that bot has been deployed to Staging
  #        run: |
  #          ./discord.sh --webhook-url=${{ secrets.LANCELOT_WEBHOOK}} --text "Lancelot is deployed to Staging, give a minute to boot!"

  StagingSentry:
    name: Create Staging release for Sentry
    needs: Staging
    runs-on: ubuntu-latest
    environment: Staging
    env:
      NAMESPACE: staging
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '${{ env.NODE_VERSION }}'
          registry-url: 'https://registry.npmjs.org'

      - uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: npm i npm@latest -g && npm ci
        env:
          NPM_CONFIG_PRODUCTION: false

      - name: Run Build
        run: tsc -p tsconfig.production.json

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: knight-hacks
          SENTRY_PROJECT: discord-bot
        with:
          environment: ${{ env.NAMESPACE }}
          sourcemaps: ./dist

  Production:
    name: Deploy to Production
    needs: Staging
    runs-on: ubuntu-latest
    environment: Production
    env:
      NAMESPACE: production
    steps:
      - uses: actions/checkout@v2

      - name: Set AKS Context
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

      - name: Create k8s namespace if it doesn't exist
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -

      - name: Create image pull secret for ACR
        uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
          container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          secret-name: ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}

      - name: Create lancelot secret
        uses: azure/k8s-create-secret@v1
        with:
          secret-name: kh-lancelot-secret
          namespace: ${{ env.NAMESPACE }}
          secret-type: generic
          arguments: >
            --from-literal=DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
            --from-literal=GUILD_ID=${{ secrets.GUILD_ID }}
            --from-literal=WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }}
            --from-literal=SENTRY_DSN=${{ secrets.SENTRY_DSN }}
            --from-literal=SENTRY_ENV=${{ env.NAMESPACE }}
            --from-literal=GITHUB_SHA=${{ github.sha }}

      - name: Deploy to AKS
        uses: azure/k8s-deploy@v1
        with:
          manifests: |
            manifests/bot.yml
          images: '${{ env.REGISTRY_NAME }}.azurecr.io/lancelot:${{ github.sha }}'
          imagepullsecrets: |
            ${{ env.SECRET }}
            kh-lancelot-secret
          namespace: ${{ env.NAMESPACE }}

  #      - name: Send Webhook that bot has been deployed to Production
  #        run: |
  #          ./discord.sh --webhook-url=${{ secrets.LANCELOT_WEBHOOK}} --text "Lancelot is deployed to Production, give a minute to boot!"

  ProductionSentry:
    name: Create Production release for Sentry
    needs: Production
    runs-on: ubuntu-latest
    env:
      NAMESPACE: production
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '${{ env.NODE_VERSION }}'
          registry-url: 'https://registry.npmjs.org'

      - uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: npm i npm@latest -g && npm ci
        env:
          NPM_CONFIG_PRODUCTION: false

      - name: Run Build
        run: tsc -p tsconfig.production.json

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: knight-hacks
          SENTRY_PROJECT: discord-bot
        with:
          environment: ${{ env.NAMESPACE }}
          sourcemaps: ./dist
